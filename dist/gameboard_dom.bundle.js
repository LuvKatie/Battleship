(()=>{var e={756:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(537),a=n.n(r),i=n(645),s=n.n(i)()(a());s.push([e.id,"body {\n    display: grid;\n    grid-template: 1fr / 1fr 1fr;\n    align-items: center;\n    justify-items: center;\n    margin: 0;\n    height: 100vh;\n    width: 100vw;\n}\n\n.ship {\n    background-color: lightgreen;\n}\n\n#player-board,\n#cpu-board {\n    display: grid;\n    grid-template: repeat(10, 1fr) / repeat(10, 1fr);\n    width: 55%;\n    height: 55%;\n}\n\n#player-board {\n    grid-column: 2 / 3;\n}\n\n.playerSq,\n.cpuSq {\n    width: 100%;\n    height: 100%;\n    border: 1px solid black;\n}\n\n#cpu-board {\n    grid-row: 1 / 2;\n    grid-column: 1 / 2;\n}","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,4BAA4B;IAC5B,mBAAmB;IACnB,qBAAqB;IACrB,SAAS;IACT,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,4BAA4B;AAChC;;AAEA;;IAEI,aAAa;IACb,gDAAgD;IAChD,UAAU;IACV,WAAW;AACf;;AAEA;IACI,kBAAkB;AACtB;;AAEA;;IAEI,WAAW;IACX,YAAY;IACZ,uBAAuB;AAC3B;;AAEA;IACI,eAAe;IACf,kBAAkB;AACtB",sourcesContent:["body {\n    display: grid;\n    grid-template: 1fr / 1fr 1fr;\n    align-items: center;\n    justify-items: center;\n    margin: 0;\n    height: 100vh;\n    width: 100vw;\n}\n\n.ship {\n    background-color: lightgreen;\n}\n\n#player-board,\n#cpu-board {\n    display: grid;\n    grid-template: repeat(10, 1fr) / repeat(10, 1fr);\n    width: 55%;\n    height: 55%;\n}\n\n#player-board {\n    grid-column: 2 / 3;\n}\n\n.playerSq,\n.cpuSq {\n    width: 100%;\n    height: 100%;\n    border: 1px solid black;\n}\n\n#cpu-board {\n    grid-row: 1 / 2;\n    grid-column: 1 / 2;\n}"],sourceRoot:""}]);const o=s},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var o=0;o<this.length;o++){var c=this[o][0];null!=c&&(s[c]=!0)}for(var u=0;u<e.length;u++){var d=[].concat(e[u]);r&&s[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},s=[],o=0;o<e.length;o++){var c=e[o],u=r.base?c[0]+r.base:c[0],d=i[u]||0,p="".concat(u," ").concat(d);i[u]=d+1;var l=n(p),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==l)t[l].references++,t[l].updater(h);else{var f=a(h,r);r.byIndex=o,t.splice(o,0,{identifier:p,updater:f,references:1})}s.push(p)}return s}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var o=n(i[s]);t[o].references--}for(var c=r(e,a),u=0;u<i.length;u++){var d=n(i[u]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},551:(e,t,n)=>{"use strict";n.d(t,{V:()=>r,a:()=>a});class r{constructor(){this.board=a(),this.hit=0,this.miss=0,this.ships=[]}placeShip(e,t,n){if(!(e[0]<1||e[1]<1||e[0]>10||e[1]>10||2!==e.length)&&["up","left","right","down"].includes(t)){for(let r=0;r<n.length;r++)switch(t){case"up":if(e[0]-n.length<1)break;document.querySelector(`.p${e[0]-r}-${e[1]}`).classList.add("ship");break;case"left":if(e[1]-n.length<1)break;document.querySelector(`.p${e[0]}-${e[1]-r}`).classList.add("ship");break;case"right":if(e[1]+n.length<1)break;document.querySelector(`.p${e[0]}-${e[1]+r}`).classList.add("ship");break;case"down":if(e[0]+n.length>10)break;document.querySelector(`.p${e[0]+r}-${e[1]}`).classList.add("ship")}return!0}}receiveAttack(e){return this.placeShip([1,2],"up",[]).every((t=>e.includes(t)))?"hit":(this.miss+=1,"miss")}allSunk(){}}function a(){let e=[],t=1,n=1;for(;n<=10&&t<=10;){if(10==t&&10==n)return e.push(`${t}-${n}`),e;10==n&&(e.push(`${t}-${n}`),t++,n=1),e.push(`${t}-${n}`),n++}return e}},630:e=>{e.exports={Ship:class{constructor(e){this.length=e,this.damage=0,this.sunk=!1,this.cords=[]}hit(){return this.damage+=1,this.damage}isSunk(){return this.damage==this.length?this.sunk=!0:this.sunk=!1,this.sunk}}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{"use strict";var e=n(379),t=n.n(e),r=n(795),a=n.n(r),i=n(569),s=n.n(i),o=n(565),c=n.n(o),u=n(216),d=n.n(u),p=n(589),l=n.n(p),h=n(756),f={};f.styleTagTransform=l(),f.setAttributes=c(),f.insert=s().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=d(),t()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;var A=n(551),m=n(630);const g=document.querySelector("body");(new class{constructor(){}gameContainers(){const e=document.createElement("div"),t=document.createElement("div");e.id="player-board",t.id="cpu-board",g.append(e,t)}gameboardSquares(){let e=(0,A.a)();const t=document.getElementById("player-board"),n=document.getElementById("cpu-board");e.forEach((e=>{const r=document.createElement("div"),a=document.createElement("div");r.classList.add(`p${e}`,"playerSq"),a.classList.add(`c${e}`,"cpuSq"),t.appendChild(r),n.appendChild(a)}))}createDOM=()=>{this.gameContainers(),this.gameboardSquares()}}).createDOM();const v=new m.Ship(4),y=new A.V;y.placeShip([5,5],"up",v),y.placeShip([7,5],"left",v)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,